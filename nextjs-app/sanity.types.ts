/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type CallToAction = {
  _type: "callToAction";
  heading: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "post";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type NewAndEvent = {
  _id: string;
  _type: "newAndEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content: BlockContent;
};

export type ServiceGallery = {
  _id: string;
  _type: "serviceGallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }>;
};

export type HomepagePicture = {
  _id: string;
  _type: "homepagePicture";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }>;
};

export type LegalDocument = {
  _id: string;
  _type: "legalDocument";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  tag?: string;
  category: "Obchodn\xED podm\xEDnky" | "Ochrana osobn\xEDch \xFAdaj\u016F (GDPR)" | "Cookies" | "E-shop" | "Pobytov\xE9 slu\u017Eby" | "Dal\u0161\xED dokumenty";
  file: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type HomepageService = {
  _id: string;
  _type: "homepageService";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
};

export type Video = {
  _id: string;
  _type: "video";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  videoFile: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  tag: string;
  description: string;
  content: BlockContent;
  price?: number;
  priceType?: "/h" | "/m\u011Bs\xED\u010Dn\u011B" | "dle domluvy" | "";
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  question: string;
  answer: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  category: "Ebooky" | "Video kurzy";
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  price: number;
  description: string;
  featured?: boolean;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description: string;
  category: "Zdrav\xED" | "Pohyb" | "Metabolismus" | "Du\u0161evn\xED zdrav\xED" | "\u017Deny" | "Mu\u017Ei";
  content?: BlockContent;
  readTime?: number;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  specialization: string;
  topics: Array<string>;
  description: string;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  picture: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  video: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    description?: string;
    thumbnailImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "file";
  };
  certifications?: Array<string>;
  biography: BlockContent;
  extraBlock?: {
    title?: string;
    description?: BlockContent;
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = CallToAction | Link | InfoSection | BlockContent | NewAndEvent | ServiceGallery | HomepagePicture | LegalDocument | HomepageService | Video | Service | Faq | Product | Page | Post | Person | Settings | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/faqs.ts
// Variable: allFaqsQuery
// Query: *[_type == "faq"] | order(order asc, question asc) {    _id,    question,    answer,    category,    order,    _createdAt,    _updatedAt  }
export type AllFaqsQueryResult = Array<{
  _id: string;
  question: string;
  answer: string;
  category: null;
  order: null;
  _createdAt: string;
  _updatedAt: string;
}>;

// Source: ./sanity/queries/homepagePictures.ts
// Variable: homepagePicturesQuery
// Query: *[_type == "homepagePicture"][0]
export type HomepagePicturesQueryResult = {
  _id: string;
  _type: "homepagePicture";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }>;
} | null;

// Source: ./sanity/queries/legal.ts
// Variable: allLegalDocumentsQuery
// Query: *[_type == "legalDocument"] | order(title asc) {    _id,title,description,category,    file{      asset->{_id,url,assetId,originalFilename,extension,size}    },    _createdAt,_updatedAt,_rev  }
export type AllLegalDocumentsQueryResult = Array<{
  _id: string;
  title: string;
  description: string;
  category: "Cookies" | "Dal\u0161\xED dokumenty" | "E-shop" | "Obchodn\xED podm\xEDnky" | "Ochrana osobn\xEDch \xFAdaj\u016F (GDPR)" | "Pobytov\xE9 slu\u017Eby";
  file: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
}>;
// Variable: gdprQuery
// Query: *[_type == "legalDocument" && tag == "gdpr-consent"][0]{    _id,title,description,category,    file{      asset->{_id,url,assetId,originalFilename,extension,size}    },    _createdAt,_updatedAt,_type,_rev  }
export type GdprQueryResult = {
  _id: string;
  title: string;
  description: string;
  category: "Cookies" | "Dal\u0161\xED dokumenty" | "E-shop" | "Obchodn\xED podm\xEDnky" | "Ochrana osobn\xEDch \xFAdaj\u016F (GDPR)" | "Pobytov\xE9 slu\u017Eby";
  file: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "legalDocument";
  _rev: string;
} | null;
// Variable: termsAndConditionsQuery
// Query: *[_type == "legalDocument" && tag == "TandC"][0]{    _id,title,description,category,    file{      asset->{_id,url,assetId,originalFilename,extension,size}    },    _createdAt,_updatedAt,_type,_rev  }
export type TermsAndConditionsQueryResult = {
  _id: string;
  title: string;
  description: string;
  category: "Cookies" | "Dal\u0161\xED dokumenty" | "E-shop" | "Obchodn\xED podm\xEDnky" | "Ochrana osobn\xEDch \xFAdaj\u016F (GDPR)" | "Pobytov\xE9 slu\u017Eby";
  file: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "legalDocument";
  _rev: string;
} | null;

// Source: ./sanity/queries/newsAndEvents.ts
// Variable: newsAndEventsQuery
// Query: *[_type == "newAndEvent"][0]
export type NewsAndEventsQueryResult = {
  _id: string;
  _type: "newAndEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content: BlockContent;
} | null;

// Source: ./sanity/queries/pages.ts
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {   link {    ...,      _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }  } },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{ ...,   _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  } }        }      },    },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string;
  slug: Slug;
  heading: string;
  subheading: string | null;
  pageBuilder: Array<{
    _key: string;
    _type: "callToAction";
    heading: string;
    text?: string;
    buttonText?: string;
    link: {
      _type: "link";
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      post: string | null;
      openInNewTab?: boolean;
    } | null;
  } | {
    _key: string;
    _type: "infoSection";
    heading?: string;
    subheading?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page: string | null;
        post: string | null;
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    }> | null;
  }> | null;
} | null;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)]  | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: "page";
  _updatedAt: string;
} | {
  slug: string;
  _type: "post";
  _updatedAt: string;
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;

// Source: ./sanity/queries/people.ts
// Variable: personQuery
// Query: *[_type == "person" && slug.current == $slug][0]{      _id,  name,  slug,  specialization,  description,  topics,  mainImage {   asset,  alt,  _type },  picture {   asset,  alt,  _type },  certifications,  biography,  extraBlock,    video {      asset->{_id,url,assetId,originalFilename,extension,size},      thumbnailImage {   asset,  alt,  _type }    },    _createdAt,_updatedAt,_type,_rev  }
export type PersonQueryResult = {
  _id: string;
  name: string;
  slug: Slug;
  specialization: string;
  description: string;
  topics: Array<string>;
  mainImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  picture: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  certifications: Array<string> | null;
  biography: BlockContent;
  extraBlock: {
    title?: string;
    description?: BlockContent;
  } | null;
  video: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
    thumbnailImage: {
      asset: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      } | null;
      alt: string | null;
      _type: "image";
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "person";
  _rev: string;
} | null;
// Variable: allPersonsQuery
// Query: *[_type == "person"] | order(name asc) {   _id,  name,  slug,  specialization,  description,  topics,  mainImage {   asset,  alt,  _type },  picture {   asset,  alt,  _type },  certifications,  biography,  extraBlock }
export type AllPersonsQueryResult = Array<{
  _id: string;
  name: string;
  slug: Slug;
  specialization: string;
  description: string;
  topics: Array<string>;
  mainImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  picture: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  certifications: Array<string> | null;
  biography: BlockContent;
  extraBlock: {
    title?: string;
    description?: BlockContent;
  } | null;
}>;

// Source: ./sanity/queries/posts.ts
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc){  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  category,  tags,  content,  readTime,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{name, specialization, picture, slug},}
export type AllPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: string;
  category: "Du\u0161evn\xED zdrav\xED" | "Metabolismus" | "Mu\u017Ei" | "Pohyb" | "Zdrav\xED" | "\u017Deny";
  tags: null;
  content: BlockContent | null;
  readTime: number | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    name: string;
    specialization: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    slug: Slug;
  };
}>;
// Variable: firstPostQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc)[0]{  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  category,  tags,  content,  readTime,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{name, specialization, picture, slug},}
export type FirstPostQueryResult = {
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: string;
  category: "Du\u0161evn\xED zdrav\xED" | "Metabolismus" | "Mu\u017Ei" | "Pohyb" | "Zdrav\xED" | "\u017Deny";
  tags: null;
  content: BlockContent | null;
  readTime: number | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    name: string;
    specialization: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    slug: Slug;
  };
} | null;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc)[0...$limit]{  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  category,  tags,  content,  readTime,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{name, specialization, picture, slug},}
export type MorePostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: string;
  category: "Du\u0161evn\xED zdrav\xED" | "Metabolismus" | "Mu\u017Ei" | "Pohyb" | "Zdrav\xED" | "\u017Deny";
  tags: null;
  content: BlockContent | null;
  readTime: number | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    name: string;
    specialization: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    slug: Slug;
  };
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]{content[]{...,markDefs[]{...,  _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }}},  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  category,  tags,  content,  readTime,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{name, specialization, picture, slug},}
export type PostQueryResult = {
  content: BlockContent | null;
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: string;
  category: "Du\u0161evn\xED zdrav\xED" | "Metabolismus" | "Mu\u017Ei" | "Pohyb" | "Zdrav\xED" | "\u017Deny";
  tags: null;
  readTime: number | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    name: string;
    specialization: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    slug: Slug;
  };
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;

// Source: ./sanity/queries/products.ts
// Variable: allProductsQuery
// Query: *[_type == "product"] | order(name asc) {   _id,  title,  price,  discount,  image {   asset,  alt,  _type },  description,  featured,  category,  _createdAt,  _updatedAt,  _rev,  _type }
export type AllProductsQueryResult = Array<{
  _id: string;
  title: string;
  price: number;
  discount: null;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  description: string;
  featured: boolean | null;
  category: "Ebooky" | "Video kurzy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  _type: "product";
}>;
// Variable: featuredProductQuery
// Query: *[_type == "product" && featured == true][0]{   _id,  title,  price,  discount,  image {   asset,  alt,  _type },  description,  featured,  category,  _createdAt,  _updatedAt,  _rev,  _type }
export type FeaturedProductQueryResult = {
  _id: string;
  title: string;
  price: number;
  discount: null;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
    _type: "image";
  };
  description: string;
  featured: boolean | null;
  category: "Ebooky" | "Video kurzy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  _type: "product";
} | null;

// Source: ./sanity/queries/serviceGalleries.ts
// Variable: serviceGalleriesQuery
// Query: *[_type == "serviceGallery"][0]
export type ServiceGalleriesQueryResult = {
  _id: string;
  _type: "serviceGallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }>;
} | null;

// Source: ./sanity/queries/services.ts
// Variable: allServicesQuery
// Query: *[_type == "service"] | order(title asc) {    _id,title,tag,description,content,price,priceType,image,    _createdAt,_updatedAt,_type,_rev  }
export type AllServicesQueryResult = Array<{
  _id: string;
  title: string;
  tag: string;
  description: string;
  content: BlockContent;
  price: number | null;
  priceType: "" | "/h" | "/m\u011Bs\xED\u010Dn\u011B" | "dle domluvy" | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "service";
  _rev: string;
}>;
// Variable: allHomepageServicesQuery
// Query: *[_type == "homepageService"] | order(title asc) {    _id,title,description,image,    _createdAt,_updatedAt,_type,_rev  }
export type AllHomepageServicesQueryResult = Array<{
  _id: string;
  title: string;
  description: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  } | null;
  _createdAt: string;
  _updatedAt: string;
  _type: "homepageService";
  _rev: string;
}>;

// Source: ./sanity/queries/videos.ts
// Variable: videoQuery
// Query: *[_type == "video"][0]{    _id,title,description,    videoFile{      asset->{_id,url,assetId,originalFilename,extension,size}    },    _createdAt,_updatedAt,_type,_rev  }
export type VideoQueryResult = {
  _id: string;
  title: string;
  description: string;
  videoFile: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "video";
  _rev: string;
} | null;
// Variable: allVideosQuery
// Query: *[_type == "video"] | order(title asc){    _id,title,description,    videoFile{      asset->{_id,url,assetId,originalFilename,extension,size}    },    _createdAt,_updatedAt,_type,_rev  }
export type AllVideosQueryResult = Array<{
  _id: string;
  title: string;
  description: string;
  videoFile: {
    asset: {
      _id: string;
      url: string | null;
      assetId: string | null;
      originalFilename: string | null;
      extension: string | null;
      size: number | null;
    } | null;
  };
  _createdAt: string;
  _updatedAt: string;
  _type: "video";
  _rev: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"faq\"] | order(order asc, question asc) {\n    _id,\n    question,\n    answer,\n    category,\n    order,\n    _createdAt,\n    _updatedAt\n  }\n": AllFaqsQueryResult;
    "\n    *[_type == \"homepagePicture\"][0]\n": HomepagePicturesQueryResult;
    "\n  *[_type == \"legalDocument\"] | order(title asc) {\n    _id,title,description,category,\n    file{\n      asset->{_id,url,assetId,originalFilename,extension,size}\n    },\n    _createdAt,_updatedAt,_rev\n  }\n": AllLegalDocumentsQueryResult;
    "\n  *[_type == \"legalDocument\" && tag == \"gdpr-consent\"][0]{\n    _id,title,description,category,\n    file{\n      asset->{_id,url,assetId,originalFilename,extension,size}\n    },\n    _createdAt,_updatedAt,_type,_rev\n  }\n": GdprQueryResult;
    "\n  *[_type == \"legalDocument\" && tag == \"TandC\"][0]{\n    _id,title,description,category,\n    file{\n      asset->{_id,url,assetId,originalFilename,extension,size}\n    },\n    _createdAt,_updatedAt,_type,_rev\n  }\n": TermsAndConditionsQueryResult;
    "\n    *[_type == \"newAndEvent\"][0]\n": NewsAndEventsQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == \"callToAction\" => { \n  link {\n    ...,\n    \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n  }\n },\n      _type == \"infoSection\" => {\n        content[]{\n          ...,\n          markDefs[]{ ..., \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n }\n        }\n      },\n    },\n  }\n": GetPageQueryResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
    "\n  *[_type == \"page\" || _type == \"post\" && defined(slug.current)]\n  | order(_type asc) {\n    \"slug\": slug.current,\n    _type,\n    _updatedAt\n  }\n": SitemapDataResult;
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  *[_type == \"person\" && slug.current == $slug][0]{\n    \n  _id,\n  name,\n  slug,\n  specialization,\n  description,\n  topics,\n  mainImage { \n  asset,\n  alt,\n  _type\n },\n  picture { \n  asset,\n  alt,\n  _type\n },\n  certifications,\n  biography,\n  extraBlock\n,\n    video {\n      asset->{_id,url,assetId,originalFilename,extension,size},\n      thumbnailImage { \n  asset,\n  alt,\n  _type\n }\n    },\n    _createdAt,_updatedAt,_type,_rev\n  }\n": PersonQueryResult;
    "\n  *[_type == \"person\"] | order(name asc) { \n  _id,\n  name,\n  slug,\n  specialization,\n  description,\n  topics,\n  mainImage { \n  asset,\n  alt,\n  _type\n },\n  picture { \n  asset,\n  alt,\n  _type\n },\n  certifications,\n  biography,\n  extraBlock\n }\n": AllPersonsQueryResult;
    "*[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc){\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  category,\n  tags,\n  content,\n  readTime,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{name, specialization, picture, slug},\n}": AllPostsQueryResult;
    "*[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc)[0]{\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  category,\n  tags,\n  content,\n  readTime,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{name, specialization, picture, slug},\n}": FirstPostQueryResult;
    "*[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc)[0...$limit]{\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  category,\n  tags,\n  content,\n  readTime,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{name, specialization, picture, slug},\n}": MorePostsQueryResult;
    "*[_type == \"post\" && slug.current == $slug][0]{content[]{...,markDefs[]{...,\n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n}},\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  category,\n  tags,\n  content,\n  readTime,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{name, specialization, picture, slug},\n}": PostQueryResult;
    "*[_type == \"post\" && defined(slug.current)]{\"slug\": slug.current}": PostPagesSlugsResult;
    "*[_type == \"product\"] | order(name asc) { \n  _id,\n  title,\n  price,\n  discount,\n  image { \n  asset,\n  alt,\n  _type\n },\n  description,\n  featured,\n  category,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  _type\n }": AllProductsQueryResult;
    "*[_type == \"product\" && featured == true][0]{ \n  _id,\n  title,\n  price,\n  discount,\n  image { \n  asset,\n  alt,\n  _type\n },\n  description,\n  featured,\n  category,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  _type\n }": FeaturedProductQueryResult;
    "\n    *[_type == \"serviceGallery\"][0]\n": ServiceGalleriesQueryResult;
    "\n  *[_type == \"service\"] | order(title asc) {\n    _id,title,tag,description,content,price,priceType,image,\n    _createdAt,_updatedAt,_type,_rev\n  }\n": AllServicesQueryResult;
    "\n  *[_type == \"homepageService\"] | order(title asc) {\n    _id,title,description,image,\n    _createdAt,_updatedAt,_type,_rev\n  }\n": AllHomepageServicesQueryResult;
    "\n  *[_type == \"video\"][0]{\n    _id,title,description,\n    videoFile{\n      asset->{_id,url,assetId,originalFilename,extension,size}\n    },\n    _createdAt,_updatedAt,_type,_rev\n  }\n": VideoQueryResult;
    "\n  *[_type == \"video\"] | order(title asc){\n    _id,title,description,\n    videoFile{\n      asset->{_id,url,assetId,originalFilename,extension,size}\n    },\n    _createdAt,_updatedAt,_type,_rev\n  }\n": AllVideosQueryResult;
  }
}
